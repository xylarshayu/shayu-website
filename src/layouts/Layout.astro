---
import { ViewTransitions } from 'astro:transitions';
import '@styles/global.css';
import { checkLoggedIn } from "@lib/auth";
import { type selectStatus as Status } from "@db/schema";
import { getPostOrStatus, THEME_MAP } from '@lib/utils';
// import { GoogleFontsOptimizer } from "astro-google-fonts-optimizer";

interface Props {
	title: string;
	theme?: { color: string | undefined; background: string | undefined, gray: string | null } | Status['theme'] | undefined;
	fetchLatestStatus?: boolean;
	obscureLogo?: boolean;
}

let { title, theme = 'dark', fetchLatestStatus = true, obscureLogo = false } = Astro.props;
if (fetchLatestStatus) {
	const { data: latestStatus } = await getPostOrStatus(Astro, 'status', true);
	if (typeof theme == 'string') {
		theme = latestStatus.theme || 'dark';
	}
}

let htmlThemeStyle;
if (theme) {
	const themeToApply = typeof theme === 'string' ? THEME_MAP[theme] : theme;
	const { color, background, gray } = themeToApply;
	htmlThemeStyle = `${color ? `color: ${color};` : ''} ${background ? `background-color: ${background};` : ''} ${gray ? `--applied-gray-color: ${gray};` : ''}`;
}

const { isLoggedIn } = await checkLoggedIn(Astro.cookies);

const keyhole_svg_src = 'https://www.svgrepo.com/show/72923/keyhole-silhouette.svg';
const lock_svg_src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRAW7hKUDCyjjeSV6_I84_imG3Mmx6jexY90A&s';
---

<!doctype html>
<html lang="en" style={htmlThemeStyle}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="shayu's site" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/shayu_imp.svg" />
		<meta name="generator" content={Astro.generator} />
		<!-- <GoogleFontsOptimizer url="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700;800;900&display=swap" /> -->
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body>

		<nav class="w-[90%] md:w-[70%] h-[--header-nav-height] py-1 mx-auto flex items-center justify-between">
			<div class="gap-4 flex items-center">
				<a href="/search" class="tracking-wider uppercase text-xs">Writings</a>
				<span>â€¢</span>
				<a href="/info" class="tracking-wider uppercase text-xs">Info</a>
			</div>
			<a href="/" class="h-1/2 wiggle-left-on-hover">
				<img src="/shayu_imp.svg" alt="Shayu" id="shayu-logo" class:list={[ "h-full w-auto delayed-zoom-on-hover", { "obscure-logo": obscureLogo } ]} />
			</a>
		</nav>

		<slot />

		<footer class="w-[90%] md:w-[70%] h-[--header-nav-height] py-1 mx-auto flex items-center justify-center">
			{
				isLoggedIn ?
					<div class="flex items-center gap-2">
						<a href="/login/github/logout">
							<img src={lock_svg_src} alt="Goodbye shayu" class="h-[15px] w-auto" loading="lazy"/>
						</a>
						<a href="/admin/status">
							Post
						</a>
					</div>
					:
					<a href="/login/github">
						<img src={keyhole_svg_src} alt="Are you shayu?" class="h-[15px] w-auto" loading="lazy"/>
					</a>
			}
		</footer>

	</body>
</html>

<script>
	// Theme cycling functionality
	const themes = ['dark', 'light', 'red', 'purple'];

	function getCurrentTheme() {
		const htmlElement = document.documentElement;
		const currentStyle = htmlElement.getAttribute('style') || '';

		// Check which theme is currently applied by looking for specific color values
		if (currentStyle.includes('var(--dark-pen-color)')) return 'dark';
		if (currentStyle.includes('var(--pen-color)')) return 'light';
		if (currentStyle.includes('var(--red-pen-color)')) return 'red';
		if (currentStyle.includes('var(--purple-pen-color)')) return 'purple';

		return 'dark'; // default fallback
	}

	function applyTheme(themeName: 'dark' | 'light' | 'red' | 'purple') {
		const themeMap: Record<'dark' | 'light' | 'red' | 'purple', { color: string; background: string; gray: string }> = {
			dark: { color: 'var(--dark-pen-color)', background: 'var(--dark-screen-color)', gray: 'var(--dark-gray-color)' },
			light: { color: 'var(--pen-color)', background: 'var(--screen-color)', gray: 'var(--gray-color)' },
			red: { color: 'var(--red-pen-color)', background: 'var(--red-screen-color)', gray: 'var(--red-gray-color)' },
			purple: { color: 'var(--purple-pen-color)', background: 'var(--purple-screen-color)', gray: 'var(--purple-gray-color)' },
		};

		const theme = themeMap[themeName];
		if (!theme) return;

		const { color, background, gray } = theme;
		const newStyle = `${color ? `color: ${color};` : ''} ${background ? `background-color: ${background};` : ''} ${gray ? `--applied-gray-color: ${gray};` : ''}`;

		document.documentElement.setAttribute('style', newStyle);
	}

	function cycleTheme() {
		const currentTheme = getCurrentTheme();
		const currentIndex = themes.indexOf(currentTheme);
		const nextIndex = (currentIndex + 1) % themes.length;
		const nextTheme = themes[nextIndex] as 'dark' | 'light' | 'red' | 'purple';

		applyTheme(nextTheme);
		console.log(`Theme switched to: ${nextTheme}`);
	}

	// Add keyboard shortcut listener
	document.addEventListener('keydown', function(event) {
		// Check for Ctrl + Shift + L
		if (event.ctrlKey && event.shiftKey && event.key === 'L') {
			event.preventDefault(); // Prevent default browser behavior
			cycleTheme();
		}
	});
</script>
<style is:global>
	html {
		font-family: system-ui, sans-serif;
		transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
		scrollbar-gutter: stable;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
</style>
