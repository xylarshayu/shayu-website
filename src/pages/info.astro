---
import Layout from '../layouts/Layout.astro';
import { cacheThis, CACHE_TAGS } from '@lib/utils';

const NAMES = [
  '(Ayush) Wardhan',
  'Woden',
  'ShitlordPalpatine',
  'Xylar',
  'snowyuuuu',
  'Monsieur Rongriddle',
  'Yusha',
  'oily grampa',
  'Mistah Mario'
];

const socialLinks = [
  { name: 'GitHub', url: 'https://github.com/xylarshayu' },
  { name: 'LinkedIn', url: 'https://www.linkedin.com/in/ayush-w-xylar' }
];

cacheThis(Astro.response, CACHE_TAGS.INFO.TAG);
---

<Layout title="Shayu's Site">
  <div class="flex flex-col items-center justify-center page-height border-y border-[--dark-faint-border-color]">
    <main class="w-[90%] md:w-[50%]">
      <article class="prose !text-inherit">
        <h1>Hola</h1>
        <p>
          I am <span id="shayu-text">shayu</span>. You may also know me as
          {
            NAMES.map((name, i) => (<>
            <code class="shayu-alias">{name}</code>
            { i < NAMES.length - 2 ? ', ' : (i === NAMES.length - 2 ? ' and ' : '')}
          </>))}.
        </p>
        <p>
          Feel free to find me elsewhere on the internet: 
          { socialLinks.map((link, i) => (<>
            <a href={link.url} class="underline italic cursor-pointer text-inherit" target="_blank" rel="noopener noreferrer">
              {link.name}
            </a>
            {', '}
          </>)) }
          etc.
        </p>
        <p class="italic">
          <a id="subscribe" class="cursor-pointer underline">Want to stay posted?</a>
        </p>
      </article>
    </main>
  </div>
</Layout>

<script>
  const subscribeButton = document.getElementById('subscribe');
  const handleSubscribe = async () => {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      const permission = await Notification.requestPermission();
      if (permission === 'denied') {
        if (subscribeButton) {
          subscribeButton.innerText = 'Notifications blocked.';
        }
        return;
      }
      if (permission !== 'granted') {
        if (subscribeButton) {
          subscribeButton.innerText = 'Notifications blocked.';
        }
        return;
      }
      try {
        console.log('Registering service worker...');
        const registration = await navigator.serviceWorker.register('/sw.js');
        console.log('Registration object:', registration);
        console.log('Active SW:', registration.active);
        console.log('Installing SW:', registration.installing);
        console.log('Waiting SW:', registration.waiting);

        // Wait for the service worker to be active if it's not already
        if (registration.active === null) {
          console.log('SW not active yet, waiting...');
          await new Promise<void>((resolve) => {
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              newWorker?.addEventListener('statechange', () => {
                if (newWorker.state === 'activated') {
                  resolve();
                }
              });
            });
          });
          console.log('SW is now active.');
        }

        const existing = await registration.pushManager.getSubscription();
        if (existing) {
          if (subscribeButton) {
            subscribeButton.innerText = 'Already subscribed!';
          }
          return;
        }

        const vapidPublicKey = import.meta.env.PUBLIC_VAPID_PUBLIC_KEY;
        let subscription;
        if (!vapidPublicKey) {
          console.error('VAPID public key not available');
          if (subscribeButton) {
            subscribeButton.innerText = 'Subscription unavailable.';
          }
          return;
        } else {
          console.log('VAPID Public Key:', vapidPublicKey);

          // Convert VAPID public key from base64url string to Uint8Array
          function urlBase64ToUint8Array(base64String: string) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding)
              .replace(/-/g, '+')
              .replace(/_/g, '/');
            const rawData = window.atob(base64);
            const outputArray = new Uint8Array(rawData.length);
            for (let i = 0; i < rawData.length; ++i) {
              outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
          }
          const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);
          console.log('Converted applicationServerKey length:', applicationServerKey.length); // Should be 65

          console.log('Subscribing to push...');
          subscription = await registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: applicationServerKey
          })
          .then((sub) => {
            console.log('Push subscription successful:', sub);
            return sub;
          })
          .catch((err) => {
            console.error('Failed to subscribe to push', err);
            throw err;
          });
        }
        console.log('Push subscription:', subscription);
        const subObject = subscription.toJSON();
        await fetch('/api/subscribe.json', {
          method: 'POST',
          body: JSON.stringify({
            endpoint: subObject.endpoint,
            p256dh: subObject.keys?.p256dh,
            auth: subObject.keys?.auth
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        });
        if (subscribeButton) {
          subscribeButton.innerText = 'You are subscribed!';
          subscribeButton.style.pointerEvents = 'none';
          subscribeButton.style.opacity = '0.5';
          subscribeButton.removeEventListener('click', handleSubscribe);
        }
      } catch (error) {
        console.error('Failed to subscribe', error);
        if (subscribeButton) {
          subscribeButton.innerText = 'Subscription failed. Please try again.';
        }
      }
    } else {
      if (subscribeButton) {
        subscribeButton.innerText = 'Push notifications not supported.';
        subscribeButton.style.pointerEvents = 'none';
        subscribeButton.style.opacity = '0.5';
      }
    }
  };
  subscribeButton?.addEventListener('click', handleSubscribe);
</script>